# 模块5：交互式HTML状态栏生成指令

## 模块定义

本模块是 MVU 系统的最终展示层，负责生成一个完整的、独立的 HTML 文件。该文件将包含 CSS 样式、HTML 结构和 JavaScript 逻辑，用于创建一个可交互、能动态展示前面模块定义的 MVU 变量的状态栏。

---

## 核心要求

### 1. CSS 样式

- 根据角色设定或氛围来编写 `<style>` 内的样式
- 若无特殊要求，状态栏应设计为卡片式结构，且不设置整体的背景颜色

### 2. HTML 结构 (`<body>`)

- 基于提供的模板，在 `<div class="card-body">` 内，根据需要展示的变量自定义内容
- 为每个需要展示的变量创建一个 `<div class="property">`
- 每个属性的显示结构应包含 `<span class="value-main">` 和 `<span class="value-description">`，并为它们分配唯一的 `id`
- 对于需要以进度条形式展示的数值，需包含 `<div class="progress-bar-container">`，其内部的 `<div class="progress-bar-value">` 也必须有唯一的 `id`

### 3. JavaScript 逻辑 (`<script>`)

#### 主要任务

填充 `async function initDisplay()` 函数内部的逻辑。

#### 数据源

状态栏中展示的变量及其路径，应严格参考模块1中定义的 `[InitVar]` JSON5 数据。

**重要说明**：MVU 框架会自动处理模块 1.2 Beta 版中的元数据（`$meta` 和 `$__META_EXTENSIBLE__$`），这些元数据不会出现在 `stat_data` 中，因此状态栏无需额外处理元数据相关逻辑。

#### 实现步骤

1. 在 `initDisplay` 函数中，首先确定 `characterData` 中的角色主键名 (`characterKey`)
2. 使用 `document.getElementById()` 获取在 HTML 中定义的各个显示元素
3. 调用 `SafeGetValue(characterData, '角色主键.变量路径', '默认值')` 来安全地获取变量值
4. 对数值类变量，调用 `updateProgressBar()` 函数来更新主数值、描述和进度条。确保将从 `SafeGetValue` 获取的原始值作为第四个参数传入

#### 约束

- **绝对不能修改** `SafeGetValue`、`updateProgressBar`、`toggleSection` 这三个函数
- 最终输出的 HTML 代码中，**不应包含任何形式的注释**

### 4. 最终输出

输出内容必须是从 `<!DOCTYPE html>` 开始到 `</html>` 结束的完整 HTML 代码。

---

## 输出要求

### 1. 核心工作

基于以下模板进行定制：

1. 根据模块1中定义的变量，修改 HTML 的 `<body>` 部分以定义要展示的属性
2. 在 JavaScript 的 `initDisplay` 函数中编写逻辑以填充这些属性
3. 确保展示的变量与模块2中定义的更新规则相对应
4. 状态栏将实时反映通过模块3指令集更新的变量值

### 2. 变量映射

- 所有显示的变量必须来自模块1的初始化定义
- 变量路径必须与模块1中的 JSON5 结构完全一致
- 数值范围参考模块2中定义的 range

### 3. 系统集成

- **变量来源**：显示的变量必须来自模块1的初始化定义
- **数据更新**：变量值的更新遵循模块2的规则，通过模块3的指令执行
- **动态响应**：配合模块4的分阶段角色设定，提供完整的系统状态可视化
- **用户体验**：为用户提供直观的 MVU 系统运行状态反馈

### 4. 附加说明

在完整输出 HTML 代码后，提供以下说明文字：

#### a. 使用方式

"此 HTML 文件用于 SillyTavern 的状态栏显示。将其上传到角色卡的附加资源中，即可在对话界面看到动态更新的状态信息。"

#### b. 自定义提示

"如需修改显示样式，编辑 `<style>` 部分的 CSS。如需调整显示的变量，修改 HTML 结构和 `initDisplay` 函数，但不要修改三个核心函数（SafeGetValue、updateProgressBar、toggleSection）。"

#### c. 调试建议

"若状态栏无法正常显示，检查浏览器控制台的错误信息，确保变量路径与模块1的定义一致。"

---

## HTML 模板

```html
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>红尘卷书 状态</title>
    <style>
        :root {
            --primary: #4f6ef7;
            --accent-rose: #ff6b9d;
            --accent-teal: #4ecdc4;
            --accent-lilac: #a29bfe;
            --surface: #f9f9fd;
            --surface-strong: #ffffff;
            --border: rgba(79, 110, 247, 0.12);
            --text-main: #2f3545;
            --text-muted: #6f7390;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: "Microsoft YaHei", "PingFang SC", "Hiragino Sans GB", sans-serif;
            background: transparent;
            color: var(--text-main);
            padding: 14px;
        }
        .status-card {
            max-width: 960px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.96);
            border-radius: 20px;
            border: 1px solid var(--border);
            box-shadow: 0 18px 40px rgba(79, 110, 247, 0.12);
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        .status-header {
            display: flex;
            flex-wrap: wrap;
            align-items: flex-end;
            justify-content: space-between;
            gap: 12px;
        }
        .status-title h1 {
            font-size: 1.6rem;
            letter-spacing: 0.04em;
        }
        .status-subtitle {
            margin-top: 6px;
            font-size: 0.95rem;
            color: var(--text-muted);
        }
        .status-meta {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 12px;
            min-width: 240px;
        }
        .meta-item {
            background: var(--surface);
            border-radius: 14px;
            border: 1px solid #e3e6f5;
            padding: 12px 16px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        .meta-label {
            font-size: 0.78rem;
            letter-spacing: 0.08em;
            color: var(--text-muted);
            text-transform: uppercase;
        }
        .meta-value {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--text-main);
            word-break: break-word;
        }
        .tab-strip {
            display: flex;
            gap: 8px;
            overflow-x: auto;
            padding: 4px;
            background: #f4f5fb;
            border-radius: 14px;
        }
        .tab-strip::-webkit-scrollbar {
            height: 6px;
        }
        .tab-strip::-webkit-scrollbar-thumb {
            background: rgba(79, 110, 247, 0.3);
            border-radius: 999px;
        }
        .tab-button {
            flex: none;
            border: none;
            background: transparent;
            padding: 10px 18px;
            border-radius: 12px;
            font-size: 0.95rem;
            font-weight: 600;
            color: var(--text-muted);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .tab-button:hover {
            color: var(--primary);
            background: rgba(79, 110, 247, 0.08);
        }
        .tab-button.active {
            background: var(--surface-strong);
            color: var(--primary);
            box-shadow: 0 6px 16px rgba(79, 110, 247, 0.18);
        }
        .tab-panel {
            display: none;
            flex-direction: column;
            gap: 16px;
        }
        .tab-panel.active {
            display: flex;
        }
        .panel-block {
            background: var(--surface);
            border-radius: 16px;
            border: 1px solid #e3e6f5;
            padding: 16px 18px;
            display: flex;
            flex-direction: column;
            gap: 14px;
        }
        .panel-title {
            font-size: 1rem;
            font-weight: 700;
            color: #394165;
            letter-spacing: 0.04em;
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 12px;
        }
        .info-card {
            background: var(--surface-strong);
            border-radius: 12px;
            border: 1px solid #e1e5f2;
            padding: 12px 14px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        .info-label {
            font-size: 0.8rem;
            color: var(--text-muted);
            letter-spacing: 0.06em;
        }
        .info-value {
            font-size: 1.05rem;
            font-weight: 600;
            color: var(--text-main);
            word-break: break-word;
        }
        .metric-card {
            background: var(--surface-strong);
            border-radius: 12px;
            border: 1px solid #e1e5f2;
            padding: 14px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .metric-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }
        .metric-label {
            font-size: 0.9rem;
            color: var(--text-muted);
        }
        .metric-value {
            display: flex;
            align-items: baseline;
            gap: 6px;
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--primary);
        }
        .metric-value span {
            display: inline-flex;
        }
        .metric-desc {
            font-size: 0.85rem;
            color: var(--text-muted);
            font-weight: 400;
        }
        .progress-bar-container {
            width: 100%;
            height: 8px;
            background: #e4e7f5;
            border-radius: 999px;
            overflow: hidden;
        }
        .progress-bar-value {
            height: 100%;
            background: var(--primary);
            transition: width 0.4s ease;
            border-radius: 999px;
        }
        .text-group {
            display: grid;
            gap: 12px;
        }
        .text-item {
            background: var(--surface-strong);
            border-radius: 12px;
            border: 1px solid #e1e5f2;
            padding: 12px 14px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }
        .info-text {
            color: var(--text-main);
            line-height: 1.6;
            font-size: 0.95rem;
            white-space: pre-wrap;
            word-break: break-word;
        }
        .task-list {
            display: grid;
            gap: 12px;
        }
        .task-item {
            background: var(--surface-strong);
            border-radius: 14px;
            border: 1px solid #e1e5f2;
            padding: 14px 16px;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .task-header {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }
        .task-name {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-main);
        }
        .task-desc {
            font-size: 0.92rem;
            color: var(--text-muted);
            line-height: 1.6;
        }
        .task-type {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 3px 10px;
            border-radius: 999px;
            font-size: 0.78rem;
            font-weight: 600;
            letter-spacing: 0.06em;
            color: #fff;
        }
        .task-type-main {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%);
        }
        .task-type-side {
            background: linear-gradient(135deg, #4ecdc4 0%, #44a8a0 100%);
        }
        .achievement-board {
            display: grid;
            gap: 12px;
        }
        .achievement-item {
            position: relative;
            padding: 14px 16px 14px 48px;
            background: var(--surface-strong);
            border-radius: 14px;
            border: 1px solid #e1e5f2;
            color: var(--text-main);
            line-height: 1.6;
        }
        .achievement-item::before {
            content: attr(data-index);
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background: var(--primary);
            color: #fff;
            font-size: 0.8rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .empty-tip {
            color: #98a0c2;
            text-align: center;
            padding: 16px 12px;
            font-size: 0.95rem;
            background: var(--surface-strong);
            border-radius: 12px;
            border: 1px solid #e1e5f2;
        }
        .error-tip {
            color: #b83232;
            background: #ffe9e9;
            border: 1px solid #ffc9c9;
            border-radius: 14px;
            padding: 16px;
            line-height: 1.6;
        }
        @media (max-width: 640px) {
            body {
                padding: 10px;
            }
            .status-card {
                padding: 16px;
                border-radius: 18px;
            }
            .status-meta {
                width: 100%;
            }
            .metric-header {
                flex-direction: column;
                align-items: flex-start;
            }
            .metric-value {
                font-size: 1.15rem;
            }
            .achievement-item {
                padding-left: 44px;
            }
        }
    </style>
</head>
<body>
<div class="status-card" id="status-card">
    <header class="status-header">
        <div class="status-title">
            <h1>红尘卷书</h1>
            <p class="status-subtitle">江湖风云尽握掌心</p>
        </div>
        <div class="status-meta">
            <div class="meta-item">
                <span class="meta-label">当前时间</span>
                <span class="meta-value" id="current-time">N/A</span>
            </div>
            <div class="meta-item">
                <span class="meta-label">当前地点</span>
                <span class="meta-value" id="current-location">N/A</span>
            </div>
        </div>
    </header>

    <nav class="tab-strip" role="tablist">
        <button type="button" class="tab-button active" data-tab="main" onclick="switchTab('main', this)">概况</button>
        <button type="button" class="tab-button" data-tab="lingRuoxue" id="tab-lingruoxue" onclick="switchTab('lingRuoxue', this)" style="display:none;">凌若雪</button>
        <button type="button" class="tab-button" data-tab="murongZhi" id="tab-murongzhi" onclick="switchTab('murongZhi', this)" style="display:none;">慕容芷</button>
        <button type="button" class="tab-button" data-tab="lanLinger" id="tab-lanlinger" onclick="switchTab('lanLinger', this)" style="display:none;">蓝灵儿</button>
        <button type="button" class="tab-button" data-tab="achievements" onclick="switchTab('achievements', this)">江湖传记</button>
    </nav>

    <section class="tab-panel active" id="tab-content-main">
        <div class="panel-block">
            <h3 class="panel-title">主线追踪</h3>
            <div id="task-list" class="task-list"></div>
        </div>
    </section>

    <section class="tab-panel" id="tab-content-lingRuoxue">
        <div class="panel-block">
            <h3 class="panel-title">人际脉络</h3>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-label">好感度</span>
                    <span class="metric-value">
                        <span id="lingruoxue-affection">0</span>
                        <span class="metric-desc" id="lingruoxue-affection-desc"></span>
                    </span>
                </div>
                <div class="progress-bar-container">
                    <div id="lingruoxue-affection-bar" class="progress-bar-value" style="width: 0%;"></div>
                </div>
            </div>
            <div class="info-grid">
                <div class="info-card">
                    <span class="info-label">关系状态</span>
                    <span class="info-value" id="lingruoxue-relationship">N/A</span>
                </div>
                <div class="info-card">
                    <span class="info-label">是否同行</span>
                    <span class="info-value" id="lingruoxue-inteam">未入队</span>
                </div>
            </div>
        </div>
        <div class="panel-block">
            <h3 class="panel-title">当下心绪</h3>
            <div class="text-group">
                <div class="text-item">
                    <span class="info-label">当前着装</span>
                    <p class="info-text" id="lingruoxue-outfit">N/A</p>
                </div>
                <div class="text-item">
                    <span class="info-label">当前姿势</span>
                    <p class="info-text" id="lingruoxue-pose">N/A</p>
                </div>
                <div class="text-item">
                    <span class="info-label">当前想法</span>
                    <p class="info-text" id="lingruoxue-thoughts">N/A</p>
                </div>
            </div>
        </div>
    </section>

    <section class="tab-panel" id="tab-content-murongZhi">
        <div class="panel-block">
            <h3 class="panel-title">人际脉络</h3>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-label">好感度</span>
                    <span class="metric-value">
                        <span id="murongzhi-affection">0</span>
                        <span class="metric-desc" id="murongzhi-affection-desc"></span>
                    </span>
                </div>
                <div class="progress-bar-container">
                    <div id="murongzhi-affection-bar" class="progress-bar-value" style="width: 0%;"></div>
                </div>
            </div>
            <div class="info-grid">
                <div class="info-card">
                    <span class="info-label">关系状态</span>
                    <span class="info-value" id="murongzhi-relationship">N/A</span>
                </div>
                <div class="info-card">
                    <span class="info-label">是否同行</span>
                    <span class="info-value" id="murongzhi-inteam">未入队</span>
                </div>
            </div>
        </div>
        <div class="panel-block">
            <h3 class="panel-title">当下心绪</h3>
            <div class="text-group">
                <div class="text-item">
                    <span class="info-label">当前着装</span>
                    <p class="info-text" id="murongzhi-outfit">N/A</p>
                </div>
                <div class="text-item">
                    <span class="info-label">当前姿势</span>
                    <p class="info-text" id="murongzhi-pose">N/A</p>
                </div>
                <div class="text-item">
                    <span class="info-label">当前想法</span>
                    <p class="info-text" id="murongzhi-thoughts">N/A</p>
                </div>
            </div>
        </div>
    </section>

    <section class="tab-panel" id="tab-content-lanLinger">
        <div class="panel-block">
            <h3 class="panel-title">人际脉络</h3>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-label">好感度</span>
                    <span class="metric-value">
                        <span id="lanlinger-affection">0</span>
                        <span class="metric-desc" id="lanlinger-affection-desc"></span>
                    </span>
                </div>
                <div class="progress-bar-container">
                    <div id="lanlinger-affection-bar" class="progress-bar-value" style="width: 0%;"></div>
                </div>
            </div>
            <div class="info-grid">
                <div class="info-card">
                    <span class="info-label">关系状态</span>
                    <span class="info-value" id="lanlinger-relationship">N/A</span>
                </div>
                <div class="info-card">
                    <span class="info-label">是否同行</span>
                    <span class="info-value" id="lanlinger-inteam">未入队</span>
                </div>
            </div>
        </div>
        <div class="panel-block">
            <h3 class="panel-title">当下心绪</h3>
            <div class="text-group">
                <div class="text-item">
                    <span class="info-label">当前着装</span>
                    <p class="info-text" id="lanlinger-outfit">N/A</p>
                </div>
                <div class="text-item">
                    <span class="info-label">当前姿势</span>
                    <p class="info-text" id="lanlinger-pose">N/A</p>
                </div>
                <div class="text-item">
                    <span class="info-label">当前想法</span>
                    <p class="info-text" id="lanlinger-thoughts">N/A</p>
                </div>
            </div>
        </div>
    </section>

    <section class="tab-panel" id="tab-content-achievements">
        <div id="achievements-list" class="achievement-board"></div>
    </section>
</div>

<script>
    function SafeGetValue(obj, path, defaultValue = "N/A") {
        let keys = Array.isArray(path) ? path : path.split('.');
        let current = obj;
        for (let i = 0; i < keys.length; i++) {
            if (current === undefined || current === null || typeof current !== 'object' || !current.hasOwnProperty(keys[i])) {
                return defaultValue;
            }
            current = current[keys[i]];
        }
        if (current === undefined || current === null) {
            return defaultValue;
        }
        if (Array.isArray(current)) {
            if (current.length > 0) {
                const actualValue = current[0];
                if (typeof actualValue === 'boolean') {
                    return actualValue;
                }
                return String(actualValue);
            } else {
                return defaultValue;
            }
        }
        if (typeof current === 'boolean') {
            return current;
        }
        if (typeof current === 'number') {
            return current;
        }
        if (typeof current === 'string') {
            return current;
        }
        return JSON.stringify(current);
    }

    function updateProgressBar(barId, valueMainId, valueDescId, rawValue, min = 0, max = 100, color) {
        const progressBar = document.getElementById(barId);
        const valueMainDisplay = document.getElementById(valueMainId);
        const valueDescDisplay = document.getElementById(valueDescId);
        if (!progressBar || !valueMainDisplay) {
            return;
        }
        let numericValue = parseFloat(rawValue);
        if (isNaN(numericValue)) {
            numericValue = parseFloat(String(rawValue).replace(/[^0-9.-]/g, ''));
        }
        if (!isNaN(numericValue)) {
            valueMainDisplay.innerText = numericValue;
        } else {
            valueMainDisplay.innerText = rawValue;
        }
        if (valueDescDisplay) {
            valueDescDisplay.innerText = '';
        }
        if (!isNaN(numericValue)) {
            numericValue = Math.max(min, Math.min(max, numericValue));
            const range = max - min;
            const percentage = range === 0 ? (numericValue >= max ? 100 : 0) : ((numericValue - min) / range) * 100;
            progressBar.style.width = `${Math.max(0, Math.min(100, percentage))}%`;
            progressBar.style.backgroundColor = color ? color : '#667eea';
        }
    }

    async function initDisplay() {
        try {
            const messages = await getChatMessages(getCurrentMessageId());
            if (!messages || messages.length === 0 || !messages[0].data) {
                document.getElementById('status-card').innerHTML = "<div class='error-tip'>无法加载状态数据 (messages empty)</div>";
                return;
            }
            const gameData = messages[0].data;
            const characterData = gameData.stat_data;
            if (!characterData) {
                document.getElementById('status-card').innerHTML = "<div class='error-tip'>无法加载状态数据 (characterData missing)</div>";
                return;
            }

            const timeElem = document.getElementById('current-time');
            if (timeElem) timeElem.innerText = SafeGetValue(characterData, '世界.当前时间');

            const locationElem = document.getElementById('current-location');
            if (locationElem) locationElem.innerText = SafeGetValue(characterData, '世界.当前地点');

            const taskListElem = document.getElementById('task-list');
            if (taskListElem) {
                const taskList = characterData['任务列表'];
                if (taskList && typeof taskList === 'object') {
                    let taskHtml = '';
                    for (const taskKey in taskList) {
                        if (!Object.prototype.hasOwnProperty.call(taskList, taskKey)) {
                            continue;
                        }
                        const task = taskList[taskKey];
                        const taskType = task['任务类型'] || '未知';
                        const taskDesc = task['任务描述'] || '无描述';
                        const taskName = task['任务名'] || taskKey;
                        const typeClass = taskType === '主线' ? 'task-type-main' : 'task-type-side';
                        taskHtml += `<article class="task-item"><div class="task-header"><span class="task-type ${typeClass}">${taskType}</span><span class="task-name">${taskName}</span></div><p class="task-desc">${taskDesc}</p></article>`;
                    }
                    taskListElem.innerHTML = taskHtml || '<div class="empty-tip">暂无任务</div>';
                } else {
                    taskListElem.innerHTML = '<div class="empty-tip">暂无任务</div>';
                }
            }

            const achievementsElem = document.getElementById('achievements-list');
            if (achievementsElem) {
                const achievements = characterData['江湖传记'];
                if (Array.isArray(achievements) && achievements.length > 0) {
                    let achHtml = '';
                    achievements.forEach((ach, index) => {
                        achHtml += `<div class="achievement-item" data-index="${index + 1}">${ach}</div>`;
                    });
                    achievementsElem.innerHTML = achHtml;
                } else {
                    achievementsElem.innerHTML = '<div class="empty-tip">尚无事迹</div>';
                }
            }

            const lingRuoxueInTeam = SafeGetValue(characterData, '凌若雪.是否相遇');
            const murongZhiInTeam = SafeGetValue(characterData, '慕容芷.是否相遇');
            const lanLingerInTeam = SafeGetValue(characterData, '蓝灵儿.是否相遇');

            if (lingRuoxueInTeam === 'true' || lingRuoxueInTeam === true) {
                document.getElementById('tab-lingruoxue').style.display = 'block';
                updateProgressBar(
                    'lingruoxue-affection-bar',
                    'lingruoxue-affection',
                    'lingruoxue-affection-desc',
                    SafeGetValue(characterData, '凌若雪.好感度'),
                    0, 100, '#ff6b9d'
                );
                const lrxRelation = document.getElementById('lingruoxue-relationship');
                if (lrxRelation) lrxRelation.innerText = SafeGetValue(characterData, '凌若雪.关系状态');
                const lrxInteam = document.getElementById('lingruoxue-inteam');
                if (lrxInteam) lrxInteam.innerText = SafeGetValue(characterData, '凌若雪.是否相遇') === true || SafeGetValue(characterData, '凌若雪.是否相遇') === 'true' ? '已入队' : '未入队';
                const lrxOutfit = document.getElementById('lingruoxue-outfit');
                if (lrxOutfit) lrxOutfit.innerText = SafeGetValue(characterData, '凌若雪.当前着装');
                const lrxPose = document.getElementById('lingruoxue-pose');
                if (lrxPose) lrxPose.innerText = SafeGetValue(characterData, '凌若雪.当前姿势');
                const lrxThoughts = document.getElementById('lingruoxue-thoughts');
                if (lrxThoughts) lrxThoughts.innerText = SafeGetValue(characterData, '凌若雪.当前想法');
            } else {
                document.getElementById('tab-lingruoxue').style.display = 'none';
                document.getElementById('tab-content-lingRuoxue').classList.remove('active');
            }

            if (murongZhiInTeam === 'true' || murongZhiInTeam === true) {
                document.getElementById('tab-murongzhi').style.display = 'block';
                updateProgressBar(
                    'murongzhi-affection-bar',
                    'murongzhi-affection',
                    'murongzhi-affection-desc',
                    SafeGetValue(characterData, '慕容芷.好感度'),
                    0, 100, '#4ecdc4'
                );
                const mrzRelation = document.getElementById('murongzhi-relationship');
                if (mrzRelation) mrzRelation.innerText = SafeGetValue(characterData, '慕容芷.关系状态');
                const mrzInteam = document.getElementById('murongzhi-inteam');
                if (mrzInteam) mrzInteam.innerText = SafeGetValue(characterData, '慕容芷.是否相遇') === true || SafeGetValue(characterData, '慕容芷.是否相遇') === 'true' ? '已入队' : '未入队';
                const mrzOutfit = document.getElementById('murongzhi-outfit');
                if (mrzOutfit) mrzOutfit.innerText = SafeGetValue(characterData, '慕容芷.当前着装');
                const mrzPose = document.getElementById('murongzhi-pose');
                if (mrzPose) mrzPose.innerText = SafeGetValue(characterData, '慕容芷.当前姿势');
                const mrzThoughts = document.getElementById('murongzhi-thoughts');
                if (mrzThoughts) mrzThoughts.innerText = SafeGetValue(characterData, '慕容芷.当前想法');
            } else {
                document.getElementById('tab-murongzhi').style.display = 'none';
                document.getElementById('tab-content-murongZhi').classList.remove('active');
            }

            if (lanLingerInTeam === 'true' || lanLingerInTeam === true) {
                document.getElementById('tab-lanlinger').style.display = 'block';
                updateProgressBar(
                    'lanlinger-affection-bar',
                    'lanlinger-affection',
                    'lanlinger-affection-desc',
                    SafeGetValue(characterData, '蓝灵儿.好感度'),
                    0, 100, '#a29bfe'
                );
                const lleRelation = document.getElementById('lanlinger-relationship');
                if (lleRelation) lleRelation.innerText = SafeGetValue(characterData, '蓝灵儿.关系状态');
                const lleInteam = document.getElementById('lanlinger-inteam');
                if (lleInteam) lleInteam.innerText = SafeGetValue(characterData, '蓝灵儿.是否相遇') === true || SafeGetValue(characterData, '蓝灵儿.是否相遇') === 'true' ? '已入队' : '未入队';
                const lleOutfit = document.getElementById('lanlinger-outfit');
                if (lleOutfit) lleOutfit.innerText = SafeGetValue(characterData, '蓝灵儿.当前着装');
                const llePose = document.getElementById('lanlinger-pose');
                if (llePose) llePose.innerText = SafeGetValue(characterData, '蓝灵儿.当前姿势');
                const lleThoughts = document.getElementById('lanlinger-thoughts');
                if (lleThoughts) lleThoughts.innerText = SafeGetValue(characterData, '蓝灵儿.当前想法');
            } else {
                document.getElementById('tab-lanlinger').style.display = 'none';
                document.getElementById('tab-content-lanLinger').classList.remove('active');
            }

            const activeTab = document.querySelector('.tab-button.active');
            if (activeTab && activeTab.style.display === 'none') {
                switchTab('main', document.querySelector('[data-tab="main"]'));
            }
        } catch (error) {
            document.getElementById('status-card').innerHTML = `<div class='error-tip'>状态栏加载出错: ${error.message}</div>`;
        }
    }

    function switchTab(tabName, tabElement) {
        const tabs = document.querySelectorAll('.tab-button');
        const contents = document.querySelectorAll('.tab-panel');
        tabs.forEach(tab => tab.classList.remove('active'));
        contents.forEach(content => content.classList.remove('active'));
        if (tabElement) {
            tabElement.classList.add('active');
        } else {
            const fallback = document.querySelector('[data-tab="' + tabName + '"]');
            if (fallback) {
                fallback.classList.add('active');
            }
        }
        const targetPanel = document.getElementById('tab-content-' + tabName);
        if (targetPanel) {
            targetPanel.classList.add('active');
        }
    }

    document.addEventListener('DOMContentLoaded', initDisplay);
</script>
</body>
</html>
```

---

## 输出指令

请直接输出完整的 HTML 代码，从 `<!DOCTYPE html>` 到 `</html>` 结束。

---

## 额外要求

如用户有额外指示（如特定的样式风格、显示布局等），优先遵循用户的具体要求。
